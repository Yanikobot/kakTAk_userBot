import json, asyncio
import os
import traceback
import logging
from telethon import TelegramClient, events
from importlib import import_module
import time
import datetime
from telethon import types, events
from telethon.extensions import markdown
from telethon.tl.custom import Message
from telethon.tl.types import InputPeerUser, MessageEntityCustomEmoji
from telethon.tl.types import InputDocument









# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π Markdown-–ø–∞—Ä—Å–µ—Ä
class CustomMarkdown:
    @staticmethod
    def parse(text):
        text, entities = markdown.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl):
                if e.url == 'spoiler':
                    entities[i] = types.MessageEntitySpoiler(e.offset, e.length)
                elif e.url.startswith('emoji/'):
                    try:
                        document_id = int(e.url.split('/')[1])
                        entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, document_id)
                    except (IndexError, ValueError):
                        continue
        return text, entities

    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, f'emoji/{e.document_id}')
            if isinstance(e, types.MessageEntitySpoiler):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, 'spoiler')
        return markdown.unparse(text, entities)

# –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–ª–∏–µ–Ω—Ç—É




# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è 



logging.basicConfig(
    filename='bot_errors.log',  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    level=logging.ERROR,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
with open('config.json', 'r', encoding='utf-8') as file:
    config = json.load(file)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(
    config['session_name'],
    config['api_id'],
    config['api_hash'],
    device_model=config['device_model'],
    system_version=config['system_version'],
    app_version=config['app_version']
)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Markdown –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
# –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–ª–∏–µ–Ω—Ç—É:
client.parse_mode = CustomMarkdown()

def load_modules():
    commands_dir = 'commands'
    for filename in os.listdir(commands_dir):
        if filename.endswith('.py') and not filename.startswith('__'):
            try:
                module_name = filename[:-3]
                module = import_module(f'{commands_dir}.{module_name}')
                module.register(client, None)  # –ü–µ—Ä–µ–¥–∞–µ–º None –≤–º–µ—Å—Ç–æ allowed_chats
            except Exception as e:
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {filename}: {e}"
                print(error_message)
                logging.error(error_message, exc_info=True)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                time.sleep(5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª—è—Ö
def get_commands_info():
    commands_dir = 'commands'
    commands_info = []
    for filename in os.listdir(commands_dir):
        if filename.endswith('.py') and not filename.startswith('__'):
            try:
                module_name = filename[:-3]
                module = import_module(f'{commands_dir}.{module_name}')
                if hasattr(module, 'info_modl'):
                    commands_info.append(module.info_modl())
            except Exception as e:
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è {filename}: {e}"
                print(error_message)
                logging.error(error_message, exc_info=True)  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    return commands_info



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
async def log_command(user_id, command):
    log_entry = {
        "user_id": user_id,
        "command": command,
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª commands_log.json
    log_file = 'commands_log.json'
    if os.path.exists(log_file):
        with open(log_file, 'r', encoding='utf-8') as file:
            logs = json.load(file)
    else:
        logs = []

    logs.append(log_entry)

    with open(log_file, 'w', encoding='utf-8') as file:
        json.dump(logs, file, ensure_ascii=False, indent=4)






@client.on(events.NewMessage(pattern=r'^!–ø–æ–º–æ—â—å$'))
async def help_command(event):
    try:
        commands_info = get_commands_info()
        if not commands_info:
            await event.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        for command in commands_info:
            help_text += f"**{command['name']}** - {command['description']}\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å: `{command['suntax']}`\n\n"

        await event.reply(help_text)
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !–ø–æ–º–æ—â—å: {e}"
        print(error_message)
        logging.error(error_message, exc_info=True)
        await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã !–ø–æ–º–æ—â—å.")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å typing_action


@client.on(events.NewMessage(pattern=r'^!\+—á–∞—Ç$'))
async def add_chat(event):
    chat_id = str(event.chat_id)
    if chat_id not in config["ALLOWED_CHATS"]:
        config["ALLOWED_CHATS"].append(chat_id)
        with open('config.json', 'w', encoding='utf-8') as file:
            json.dump(config, file, ensure_ascii=False, indent=4)
        await client.delete_messages(event.chat_id, 1)
    else:
        await event.reply("–ß–∞—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")



@client.on(events.NewMessage(pattern=r'^!–ø–æ–∏—Å–∫—ç–º–æ–¥–∑–∏$'))
async def find_emoji_in_saved(event):
    try:
        async for msg in client.iter_messages('me', limit=50):
            if msg.entities:
                for entity in msg.entities:
                    if isinstance(entity, MessageEntityCustomEmoji):
                        emoji_id = entity.document_id
                        if hasattr(msg.media, 'document'):
                            doc = msg.media.document
                            await client.send_message(
                                'me',
                                f"üîç –ù–∞–π–¥–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏:\n\nID: `{emoji_id}`\nAccess Hash: `{doc.access_hash}`"
                            )
                        else:
                            await client.send_message(
                                'me',
                                f"üîç –ù–∞–π–¥–µ–Ω —ç–º–æ–¥–∑–∏ –±–µ–∑ media.document:\nID: `{emoji_id}`"
                            )

    except Exception as e:
        import traceback
        error_text = traceback.format_exc()
        await client.send_message(
            'me',
            f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–º–æ–¥–∑–∏:\n\n```\n{error_text}\n```",
            parse_mode='markdown'
        )









# Type for 2 seconds, then send a message
chat_ids = [
          # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
]

async def fake_voice_loop():
    while True:
        tasks = []
        for chat in chat_ids:
            # "record-audio" –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º –∏—Å—á–µ–∑–Ω–µ—Ç ‚Äî –Ω–∞–¥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
            tasks.append(client.action(chat, 'record-audio'))

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        contexts = [action.__aenter__() for action in tasks]
        entered = await asyncio.gather(*contexts)

        # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω
        await asyncio.sleep(6)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        exits = [action.__aexit__(None, None, None) for action in tasks]
        await asyncio.gather(*exits)

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º (—á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞–±–∞–Ω–∏–ª)
        await asyncio.sleep(1)

@client.on(events.NewMessage(pattern=r'^!—Å—Ç–æ–ø$'))
async def stop_command(event):
    await event.reply("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ Ctrl+C –≤ –∫–æ–Ω—Å–æ–ª–∏.")  # –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é

    










# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async def main():



    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∞–º–æ–≥–æ —Å–µ–±—è
   

    print(config['ALLOWED_CHATS'])
    await client.start()
    load_modules()
    print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
    await client.run_until_disconnected()  # –£–±–∏—Ä–∞–µ–º disconnect, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å

if __name__ == '__main__':
    asyncio.run(main())


