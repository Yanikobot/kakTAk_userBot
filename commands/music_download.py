import os
import subprocess
import sys
from telethon import events
import json
from main import config



def info_modl():
    return {
        "name": "!–≥–∏—Ç—Ö–∞–±",
        "description": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞",
        "version": 1.1,
        "suntax": "!–≥–∏—Ç—Ö–∞–±"
    }




# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏
MUSIC_DIRECTORY = "music_files"

# –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
if not os.path.exists(MUSIC_DIRECTORY):
    os.makedirs(MUSIC_DIRECTORY)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å


def register(client, allowed_chats):
    @client.on(events.NewMessage(pattern=r'(?i)^!–º—É–∑—ã–∫–∞\s+(.+)'))
    async def music_handler(event):
        if str(event.chat_id) in config["ALLOWED_CHATS"]:
            """
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É !–º—É–∑—ã–∫–∞ <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>.
            –ù–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3.

            –ï—Å–ª–∏ MP3-—Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.
            """
            search_query = event.pattern_match.group(1).strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            file_name = f"{search_query}.mp3"
            file_path = os.path.join(MUSIC_DIRECTORY, file_name)

            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å–∫–∞—á–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if os.path.exists(file_path):
                await event.reply("–¢–∞–∫–∞—è –º—É–∑—ã–∫–∞ —É–∂–µ —Å–∫–∞—á–∞–Ω–∞. –í–æ—Ç –æ–Ω–∞:", file=file_path)
                return

            try:
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                await event.reply("–ò—â–µ–º –º—É–∑—ã–∫—É –Ω–∞ YouTube –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ... üé∂")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                info_command = [
                    sys.executable,
                    "-m",
                    "yt_dlp",
                    "--print-json",
                    "--default-search", "ytsearch",
                    search_query
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                info_command.extend(["--cookies-from-browser", "firefox"])

                result = subprocess.run(info_command, capture_output=True, text=True)

                if result.returncode != 0:
                    await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {result.stderr}")
                    return

                try:
                    video_info = json.loads(result.stdout.splitlines()[0])
                except json.JSONDecodeError:
                    await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
                duration = video_info.get("duration", 0)
                if duration > 600:  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç
                    await event.reply("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ 10 –º–∏–Ω—É—Ç.")
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                command = [
                    sys.executable,
                    "-m",
                    "yt_dlp",
                    "--extract-audio",
                    "--audio-format", "mp3",
                    "--cookies-from-browser", "firefox", 
                    "--ffmpeg-location", "C:\\fmpeg\\bin",  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                    "--default-search", "ytsearch",
                    "--output", os.path.join(MUSIC_DIRECTORY, f"{search_query}.%(ext)s"),
                    "--verbose",
                    search_query
                ]

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)
                subprocess.run(command, check=True)

                if os.path.exists(file_path):
                    await event.reply("–ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ üéµ", file=file_path)
                else:
                    await event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except subprocess.CalledProcessError as e:
                await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {e}")
            except Exception as e:
                await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            await event.reply("–ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")