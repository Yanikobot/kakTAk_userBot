from googleapiclient.discovery import build
from telethon import events
from main import config
# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à YouTube API Key
YOUTUBE_API_KEY = "AIzaSyAX075NxWYBL40YahJjS_4z4gfbGFYy72Y"

def info_modl():
    return {
        "name": "!–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ",
        "description": "–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç—É –∏ –æ–±–ª–æ–∂–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ —Å YouTube –∫–∞–Ω–∞–ª–∞",
        "version": 1.3,
        "suntax": "!–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞>"
    }



def register(client, allowed_chats):
    @client.on(events.NewMessage(pattern=r'^!–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ (.+)$'))
    async def get_latest_video(event):
        if str(event.chat_id) in config["ALLOWED_CHATS"]:
            channel_name = event.pattern_match.group(1)
            youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)


            try:
                # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                search_response = youtube.search().list(
                    q=channel_name,
                    type="channel",
                    part="id,snippet",
                    maxResults=1
                ).execute()

                if not search_response["items"]:
                    await event.reply(f"–ö–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                channel_id = search_response["items"][0]["id"]["channelId"]

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
                videos_response = youtube.search().list(
                    channelId=channel_id,
                    type="video",
                    part="id,snippet",
                    order="date",
                    maxResults=1
                ).execute()

                if not videos_response["items"]:
                    await event.reply(f"–£ –∫–∞–Ω–∞–ª–∞ '{channel_name}' –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.")
                    return

                video = videos_response["items"][0]
                video_title = video["snippet"]["title"]
                video_date = video["snippet"]["publishedAt"]
                video_url = f"https://www.youtube.com/watch?v={video['id']['videoId']}"
                thumbnail_url = video["snippet"]["thumbnails"]["high"]["url"]  # URL –æ–±–ª–æ–∂–∫–∏ –≤–∏–¥–µ–æ

                def format_number(number):
                    if number >= 1_000_000:
                        return f"{number // 1_000_000}–º"
                    elif number >= 1_000:
                        return f"{number // 1_000}–∫"
                    return str(number)

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –ª–∞–π–∫–∏)
                video_id = video['id']['videoId']
                video_stats = youtube.videos().list(
                    id=video_id,
                    part="statistics"
                ).execute()

                view_count = int(video_stats['items'][0]['statistics'].get('viewCount', 0))
                like_count = int(video_stats['items'][0]['statistics'].get('likeCount', 0))

                formatted_views = format_number(view_count)
                formatted_likes = format_number(like_count)

                # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                max_title_length = 50
                if len(video_title) > max_title_length:
                    video_title = video_title[:max_title_length].strip() + '...'

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–æ–≤
                caption = (f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞ '{channel_name}':\n\n"
                           f"üé•: `{video_title}`\n"
                           f"üóìÔ∏è: `{video_date}`\n"
                           f"üëÅÔ∏è: `{formatted_views}` ‚ù§Ô∏è: `{formatted_likes}`\n"
                           f" [üîó—Å—Å—ã–ª–∫–∞üîó]({video_url})\n\n")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –æ–±–ª–æ–∂–∫—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                await client.send_file(event.chat_id, thumbnail_url, caption=caption, parse_mode="markdown")
            except Exception as e:
                await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            await event.reply("–ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")